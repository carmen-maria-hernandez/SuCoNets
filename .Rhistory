data <- scn(data)
data <- rRedundantPredictors(data)
genes.seleccionados <- detectGenes(data,age)
all.genes <- coexpressionNetwork(data, genes.seleccionados)
install()
load_all()
load_all()
document()
load_all()
check()
use_readme_rmd()
install()
build_readme()
build_readme()
load_all
load_all()
check()
install()
load_all()
library(devtools)
load_all()
check()
install()
library(devtools)
library(tidyverse)
library(fs)
use_package("ggplot2")
load_all()
length(20:70)
load_all()
load_all()
check()
load_all()
check()
?colorRampPalette
use_package("grDevices")
load_all()
check()
?plot
use_package("graphics")
?grid
load_all()
check()
load_all()
check()
knitr::opts_chunk$set(echo = TRUE)
expr.data <- read.delim("~/WholeBlood.txt.gz",header = T,row.names = 1)
expr.data <- read.delim("~/WholeBlood.txt.gz",header = T,row.names = 1)
data.age.num <- read.csv("~/GTEx_Analysis_2017-06-05_v8_Annotations_SubjectPhenotypesDS.csv", header = T, sep = "\t")
cat("Filas conjunto data.age.num:", nrow(data.age.num), "\n")
data.age.num[979:980, ]
data.age.num <- data.age.num[-980,]
filas <- data.age.num$SUBJID
filas <- gsub("-", ".", filas)
prefijos.muestras10 <- substr(colnames(expr.data), 1,10)
prefijos.muestras9 <- substr(colnames(expr.data), 1,9)
elementos.en.comun.long10 <- intersect(prefijos.muestras10,filas)
elementos.en.comun.long9 <- intersect(prefijos.muestras9,filas)
seleccionarFilas <- function(x,y){
indices = data.frame()
indices = which(x==y[1])
for(n in 2:length(y)){
indices[n] = which(x==y[n])
}
return(indices)
}
indices.edad.long10 <- seleccionarFilas(filas, elementos.en.comun.long10)
indices.edad.long9 <- seleccionarFilas(filas, elementos.en.comun.long9)
indices.muestras.long10 <- seleccionarFilas(prefijos.muestras10, elementos.en.comun.long10)
indices.muestras.long9 <- seleccionarFilas(prefijos.muestras9, elementos.en.comun.long9)
data.characteristic <- data.age.num[c(indices.edad.long10,indices.edad.long9),c(3,4,11)]
age = data.characteristic$AGE
data = expr.data[, c(indices.muestras.long10,indices.muestras.long9)]
load_all()
load_all()
library(devtools)
library(tidyverse)
library(fs)
load_all()
check()
expr.data <- read.delim("~/WholeBlood.txt.gz",header = T,row.names = 1)
data.age.num <- read.csv("~/GTEx_Analysis_2017-06-05_v8_Annotations_SubjectPhenotypesDS.csv", header = T, sep = "\t")
data.age.num <- data.age.num[-980,]
filas <- data.age.num$SUBJID
filas <- gsub("-", ".", filas)
prefijos.muestras10 <- substr(colnames(expr.data), 1,10)
prefijos.muestras9 <- substr(colnames(expr.data), 1,9)
elementos.en.comun.long10 <- intersect(prefijos.muestras10,filas)
elementos.en.comun.long9 <- intersect(prefijos.muestras9,filas)
seleccionarFilas <- function(x,y){
indices = data.frame()
indices = which(x==y[1])
for(n in 2:length(y)){
indices[n] = which(x==y[n])
}
return(indices)
}
indices.edad.long10 <- seleccionarFilas(filas, elementos.en.comun.long10)
indices.edad.long9 <- seleccionarFilas(filas, elementos.en.comun.long9)
indices.muestras.long10 <- seleccionarFilas(prefijos.muestras10, elementos.en.comun.long10)
indices.muestras.long9 <- seleccionarFilas(prefijos.muestras9, elementos.en.comun.long9)
data.characteristic <- data.age.num[c(indices.edad.long10,indices.edad.long9),c(3,4,11)]
age = data.characteristic$AGE
data = expr.data[, c(indices.muestras.long10,indices.muestras.long9)]
nombresGenes <- read.csv("~/protcodinggenes.txt", sep = " ")
nomGenesFichExpr <- rownames(data)
nomGenesFichExpr <- unlist(lapply(strsplit(nomGenesFichExpr, "\\."),function(x){ return(x[1])}))
genesAmbosFicheros <- intersect(nomGenesFichExpr, nombresGenes[,2])
ind.nuevos.nombres <- seleccionarFilas(nombresGenes[,2], genesAmbosFicheros)
ind.nombres.antiguos <-  seleccionarFilas(nomGenesFichExpr, genesAmbosFicheros)
nuevos.nombres <- nombresGenes[ind.nuevos.nombres,1]
data <- data[ind.nombres.antiguos, ]
rownames(data) <- nuevos.nombres
rm(data.age.num,expr.data,elementos.en.comun.long10, elementos.en.comun.long9, filas, indices.edad.long10, indices.edad.long9, indices.muestras.long10, indices.muestras.long9, prefijos.muestras10, prefijos.muestras9, nombresGenes, nomGenesFichExpr, genesAmbosFicheros, ind.nuevos.nombres, ind.nombres.antiguos, nuevos.nombres)
install()
library(SuCoNets)
rm(seleccionarFilas)
library(SuCoNets)
c(m,d,age) <- normalize(age)
install()
library(devtools)
library(tidyverse)
library(fs)
load_all()
check()
document()
expr.data <- read.delim("~/WholeBlood.txt.gz",header = T,row.names = 1)
data.age.num <- read.csv("~/GTEx_Analysis_2017-06-05_v8_Annotations_SubjectPhenotypesDS.csv", header = T, sep = "\t")
data.age.num <- data.age.num[-980,]
filas <- data.age.num$SUBJID
filas <- gsub("-", ".", filas)
prefijos.muestras10 <- substr(colnames(expr.data), 1,10)
prefijos.muestras9 <- substr(colnames(expr.data), 1,9)
elementos.en.comun.long10 <- intersect(prefijos.muestras10,filas)
elementos.en.comun.long9 <- intersect(prefijos.muestras9,filas)
library(SuCoNets)
indices.edad.long10 <- seleccionarFilas(filas, elementos.en.comun.long10)
indices.edad.long9 <- seleccionarFilas(filas, elementos.en.comun.long9)
indices.muestras.long10 <- seleccionarFilas(prefijos.muestras10, elementos.en.comun.long10)
indices.muestras.long9 <- seleccionarFilas(prefijos.muestras9, elementos.en.comun.long9)
data.characteristic <- data.age.num[c(indices.edad.long10,indices.edad.long9),c(3,4,11)]
age = data.characteristic$AGE
data = expr.data[, c(indices.muestras.long10,indices.muestras.long9)]
nombresGenes <- read.csv("~/protcodinggenes.txt", sep = " ")
nomGenesFichExpr <- rownames(data)
nomGenesFichExpr <- unlist(lapply(strsplit(nomGenesFichExpr, "\\."),function(x){ return(x[1])}))
genesAmbosFicheros <- intersect(nomGenesFichExpr, nombresGenes[,2])
ind.nuevos.nombres <- seleccionarFilas(nombresGenes[,2], genesAmbosFicheros)
ind.nombres.antiguos <-  seleccionarFilas(nomGenesFichExpr, genesAmbosFicheros)
nuevos.nombres <- nombresGenes[ind.nuevos.nombres,1]
data <- data[ind.nombres.antiguos, ]
rownames(data) <- nuevos.nombres
rm(data.age.num,expr.data,elementos.en.comun.long10, elementos.en.comun.long9, filas, indices.edad.long10, indices.edad.long9, indices.muestras.long10, indices.muestras.long9, prefijos.muestras10, prefijos.muestras9, nombresGenes, nomGenesFichExpr, genesAmbosFicheros, ind.nuevos.nombres, ind.nombres.antiguos, nuevos.nombres)
library(SuCoNets)
age <- normalize(age)
m <- age[1]
d <- age[2]
age <- age[-c(1,2)]
data <- scn(data)
data <- rRedundantPredictors(data)
seed <- bestSeed(data,covariate)
seed <- bestSeed(data,age)
cvfit <- glmnetGenes(data,age, seed)
glmnet::print.cv.glmnet(cvfit)
genes.seleccionados <- detectGenes(data,age,cvfit)
comparisonActualPredictedCovariate(data, age, m, d, cvfit, seed)
load_all()
distributionIndividualsCovariate (data, age, genes.seleccionados, m,d)
distributionIndividualsCovariate (data, age, genes.seleccionados, m,d)
load_all()
all.genes <- coexpressionNetwork(data, genes.seleccionados)
distributionIndividualsCovariate (data, age, genes.seleccionados, m,d)
genes.seleccionados <- detectGenes(data,age,cvfit)
comparisonActualPredictedCovariate(data, age, m, d, cvfit, seed)
distributionIndividualsCovariate (data, age, genes.seleccionados, m,d)
#all.genes <- coexpressionNetwork(data, genes.seleccionados)
load_all()
check()
document()
build_readme()
load_all()
check()
install()
knitr::opts_chunk$set(echo = TRUE)
expr.data <- read.delim("~/WholeBlood.txt.gz",header = T,row.names = 1)
data.age.num <- read.csv("~/GTEx_Analysis_2017-06-05_v8_Annotations_SubjectPhenotypesDS.csv", header = T, sep = "\t")
View(data.age.num)
View(all.genes[[1]])
View(all.genes)
knitr::opts_chunk$set(echo = TRUE)
expr.data <- read.delim("~/WholeBlood.txt.gz",header = T,row.names = 1)
data.age.num <- read.csv("~/GTEx_Analysis_2017-06-05_v8_Annotations_SubjectPhenotypesDS.csv", header = T, sep = "\t")
data.age.num <- data.age.num[-980,]
filas <- data.age.num$SUBJID
filas <- gsub("-", ".", filas)
prefijos.muestras10 <- substr(colnames(expr.data), 1,10)
prefijos.muestras9 <- substr(colnames(expr.data), 1,9)
elementos.en.comun.long10 <- intersect(prefijos.muestras10,filas)
elementos.en.comun.long9 <- intersect(prefijos.muestras9,filas)
seleccionarFilas <- function(x,y){
indices = data.frame()
indices = which(x==y[1])
for(n in 2:length(y)){
indices[n] = which(x==y[n])
}
return(indices)
}
indices.edad.long10 <- seleccionarFilas(filas, elementos.en.comun.long10)
indices.edad.long9 <- seleccionarFilas(filas, elementos.en.comun.long9)
indices.muestras.long10 <- seleccionarFilas(prefijos.muestras10, elementos.en.comun.long10)
indices.muestras.long9 <- seleccionarFilas(prefijos.muestras9, elementos.en.comun.long9)
data.characteristic <- data.age.num[c(indices.edad.long10,indices.edad.long9),c(3,4,11)]
age = data.characteristic$AGE
data = expr.data[, c(indices.muestras.long10,indices.muestras.long9)]
nombresGenes <- read.csv("~/protcodinggenes.txt", sep = " ")
nomGenesFichExpr <- rownames(data)
nomGenesFichExpr <- unlist(lapply(strsplit(nomGenesFichExpr, "\\."),function(x){ return(x[1])}))
genesAmbosFicheros <- intersect(nomGenesFichExpr, nombresGenes[,2])
ind.nuevos.nombres <- seleccionarFilas(nombresGenes[,2], genesAmbosFicheros)
ind.nombres.antiguos <-  seleccionarFilas(nomGenesFichExpr, genesAmbosFicheros)
nuevos.nombres <- nombresGenes[ind.nuevos.nombres,1]
data <- data[ind.nombres.antiguos, ]
rownames(data) <- nuevos.nombres
rm(data.age.num,expr.data,elementos.en.comun.long10, elementos.en.comun.long9, filas, indices.edad.long10, indices.edad.long9, indices.muestras.long10, indices.muestras.long9, prefijos.muestras10, prefijos.muestras9, nombresGenes, nomGenesFichExpr, genesAmbosFicheros, ind.nuevos.nombres, ind.nombres.antiguos, nuevos.nombres)
m <- mean(age)
d <- sd(age)
age <- (age-m)/d
# Cambiamos la escala
data <- log2(data + 1)
library(caret)
# Centramos y normalizamos los datos
preProc <- preProcess(data, method = c("center", "scale"))
data <- predict(preProc, data)
rm(preProc)
library(mlbench)
r.data <- apply(data, 1, round)
ind <-nearZeroVar(r.data,freqCut = 20, uniqueCut = 5)
data <- data[-ind,]
rm(r.data, ind)
correlacion <- readRDS(file = paste("~/","correlacion.data.rds",sep=""))
eliminar <- findCorrelation(correlacion, cutoff=0.9)
data <- data[-eliminar,]
rm(correlacion, eliminar)
set.seed(98)
ind.train <- sample(1:ncol(data), 0.8*ncol(data))
data.train <-  t(data[,ind.train])
age.train <-  age[ind.train]
data.test <- t(data[,-ind.train])
age.test <- age[-ind.train]
library(glmnet)
# Devuelve una lista con todos los ingredientes de la validacion cruzada
cvfit<- cv.glmnet(data.train, age.train, alpha=1, family = "gaussian")
print(cvfit)
# Guardamos en un fichero el conjunto de genes seleccionados por glmnet para realizar la predicción:
coefic <- as.matrix(coef(cvfit,s="lambda.min"))
filas.dist.cero <- rownames(coefic)[which(coefic!=0)]
genes.seleccionados <- data.frame(Genes = filas.dist.cero[-1], Coeficientes = coefic[which(coefic!=0)][-1])
# Predecimos la edad del conjunto de test
predict.cvfit.test <- predict(cvfit, newx = data.test,type = "response",s = "lambda.min")
predict.cvfit.train <- predict(cvfit, newx = data.train,type = "response",s = "lambda.min")
# Predecimos la edad del conjunto de train
# Calculamos el RMSE del modelo sobre los datos de train y sobre los datos de test
library(MLmetrics)
tr <- MLmetrics::RMSE(predict.cvfit.train, age.train)
te <- MLmetrics::RMSE(predict.cvfit.test, age.test)
cat('\n',
'-> RMSE del modelo sobre los datos de train: ', tr, '\n',
'-> RMSE del modelo sobre los datos de test: ', te, '\n',
sep = ''
)
calcularClusters <- function(x,y, cjt, data.train, age.train){
corr <- cor(x=t(x), y = t(x[which(rownames(x)==y),]))
ind <- order(abs(corr), decreasing = T)
df <- data.frame(gen.principal = y, genes = rownames(corr)[ind], cor = corr[ind])
nueva.col <- is.element(df[1,2], cjt)
for (i in 2:nrow(df)) {
nueva.col <- c(nueva.col, is.element(df[i,2], cjt))
}
df <- cbind(df, gen.glmnet=nueva.col)
tam <- 51
indx <- seleccionarFilas(rownames(x), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
adjusted_r2 <- as.numeric(summary(mymodel)[9])
# print(adjusted_r2)
diff <- adjusted_r2
while (diff > 10^(-3)){
tam <- tam+1
indx <- seleccionarFilas(rownames(data), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
ad_r2 <- as.numeric(summary(mymodel)[9])
# print(ad_r2)
diff <- ad_r2 -adjusted_r2
# print(diff)
adjusted_r2 <- ad_r2
}
if(diff > 0)
return(df[1:tam,])
else
return(df[1:(tam-1),])
}
ejecutando.gprofiler <- function(genes.seleccionados, tam, data, df){
all.genes = list()
all.genes[[genes.seleccionados[1,1]]] = df[1:tam[1], 2]
for (i in 2:nrow(genes.seleccionados)) {
all.genes[[genes.seleccionados[i,1]]] = df[(1+sum(tam[1:(i-1)])):(sum(tam[1:i])), 2]
}
background <- rownames(data)
library(gprofiler2)
output.gprofiler2 <- gost(all.genes,
correction_method="fdr",
custom_bg = background,
sources = c("GO","KEGG","REAC"),
domain_scope = "custom",
organism = "hsapiens",
exclude_iea = F)
return(output.gprofiler2)
}
calcularCorrelacion <- function(x,y, cjt, tam){
corr <- cor(x=t(x), y = t(x[which(rownames(x)==y),]))
ind <- order(abs(corr), decreasing = T)[1:(tam+1)]
df <- data.frame(gen.principal = y, genes = head(rownames(corr)[ind], (tam+1)), cor = corr[ind])
nueva.col <- is.element(df[1,2], cjt)
for (i in 2:nrow(df)) {
nueva.col <- c(nueva.col, is.element(df[i,2], cjt))
}
return(cbind(df, gen.glmnet=nueva.col))
}
df <- calcularCorrelacion(data, genes.seleccionados[1,1], genes.seleccionados[,1], 50)
for (i in 2:nrow(genes.seleccionados)) {
df <- rbind(df, calcularCorrelacion(data, genes.seleccionados[i,1], genes.seleccionados[,1], 50))
}
all.genes = list()
for (i in 1:nrow(genes.seleccionados)) {
all.genes[[genes.seleccionados[i,1]]] = df[(i+(i-1)*50):(i+(i-1)*50+50), 2]
}
background <- rownames(data)
library(gprofiler2)
output.gprofiler2 <- gost(all.genes,
correction_method="fdr",
custom_bg = background,
sources = c("GO","KEGG","REAC"),
domain_scope = "custom",
organism = "hsapiens",
exclude_iea = F)
cat("Número de filas con 50 genes en cada cluster:", nrow(output.gprofiler2$result), "\n")
rep(51, nrow(genes.seleccionados))
rep(51, nrow(genes.seleccionados))
knitr::opts_chunk$set(echo = TRUE)
expr.data <- read.delim("~/WholeBlood.txt.gz",header = T,row.names = 1)
data.age.num <- read.csv("~/GTEx_Analysis_2017-06-05_v8_Annotations_SubjectPhenotypesDS.csv", header = T, sep = "\t")
data.age.num <- data.age.num[-980,]
filas <- data.age.num$SUBJID
filas <- gsub("-", ".", filas)
prefijos.muestras10 <- substr(colnames(expr.data), 1,10)
prefijos.muestras9 <- substr(colnames(expr.data), 1,9)
elementos.en.comun.long10 <- intersect(prefijos.muestras10,filas)
elementos.en.comun.long9 <- intersect(prefijos.muestras9,filas)
seleccionarFilas <- function(x,y){
indices = data.frame()
indices = which(x==y[1])
for(n in 2:length(y)){
indices[n] = which(x==y[n])
}
return(indices)
}
indices.edad.long10 <- seleccionarFilas(filas, elementos.en.comun.long10)
indices.edad.long9 <- seleccionarFilas(filas, elementos.en.comun.long9)
indices.muestras.long10 <- seleccionarFilas(prefijos.muestras10, elementos.en.comun.long10)
indices.muestras.long9 <- seleccionarFilas(prefijos.muestras9, elementos.en.comun.long9)
data.characteristic <- data.age.num[c(indices.edad.long10,indices.edad.long9),c(3,4,11)]
age = data.characteristic$AGE
data = expr.data[, c(indices.muestras.long10,indices.muestras.long9)]
nombresGenes <- read.csv("~/protcodinggenes.txt", sep = " ")
nomGenesFichExpr <- rownames(data)
nomGenesFichExpr <- unlist(lapply(strsplit(nomGenesFichExpr, "\\."),function(x){ return(x[1])}))
genesAmbosFicheros <- intersect(nomGenesFichExpr, nombresGenes[,2])
ind.nuevos.nombres <- seleccionarFilas(nombresGenes[,2], genesAmbosFicheros)
ind.nombres.antiguos <-  seleccionarFilas(nomGenesFichExpr, genesAmbosFicheros)
nuevos.nombres <- nombresGenes[ind.nuevos.nombres,1]
data <- data[ind.nombres.antiguos, ]
rownames(data) <- nuevos.nombres
rm(data.age.num,expr.data,elementos.en.comun.long10, elementos.en.comun.long9, filas, indices.edad.long10, indices.edad.long9, indices.muestras.long10, indices.muestras.long9, prefijos.muestras10, prefijos.muestras9, nombresGenes, nomGenesFichExpr, genesAmbosFicheros, ind.nuevos.nombres, ind.nombres.antiguos, nuevos.nombres)
m <- mean(age)
d <- sd(age)
age <- (age-m)/d
# Cambiamos la escala
data <- log2(data + 1)
library(caret)
# Centramos y normalizamos los datos
preProc <- preProcess(data, method = c("center", "scale"))
data <- predict(preProc, data)
rm(preProc)
library(mlbench)
r.data <- apply(data, 1, round)
ind <-nearZeroVar(r.data,freqCut = 20, uniqueCut = 5)
data <- data[-ind,]
rm(r.data, ind)
correlacion <- readRDS(file = paste("~/","correlacion.data.rds",sep=""))
eliminar <- findCorrelation(correlacion, cutoff=0.9)
data <- data[-eliminar,]
rm(correlacion, eliminar)
set.seed(98)
ind.train <- sample(1:ncol(data), 0.8*ncol(data))
data.train <-  t(data[,ind.train])
age.train <-  age[ind.train]
data.test <- t(data[,-ind.train])
age.test <- age[-ind.train]
library(glmnet)
# Devuelve una lista con todos los ingredientes de la validacion cruzada
cvfit<- cv.glmnet(data.train, age.train, alpha=1, family = "gaussian")
print(cvfit)
# Guardamos en un fichero el conjunto de genes seleccionados por glmnet para realizar la predicción:
coefic <- as.matrix(coef(cvfit,s="lambda.min"))
filas.dist.cero <- rownames(coefic)[which(coefic!=0)]
genes.seleccionados <- data.frame(Genes = filas.dist.cero[-1], Coeficientes = coefic[which(coefic!=0)][-1])
# Predecimos la edad del conjunto de test
predict.cvfit.test <- predict(cvfit, newx = data.test,type = "response",s = "lambda.min")
predict.cvfit.train <- predict(cvfit, newx = data.train,type = "response",s = "lambda.min")
# Predecimos la edad del conjunto de train
# Calculamos el RMSE del modelo sobre los datos de train y sobre los datos de test
library(MLmetrics)
tr <- MLmetrics::RMSE(predict.cvfit.train, age.train)
te <- MLmetrics::RMSE(predict.cvfit.test, age.test)
cat('\n',
'-> RMSE del modelo sobre los datos de train: ', tr, '\n',
'-> RMSE del modelo sobre los datos de test: ', te, '\n',
sep = ''
)
calcularClusters <- function(x,y, cjt, data.train, age.train){
corr <- cor(x=t(x), y = t(x[which(rownames(x)==y),]))
ind <- order(abs(corr), decreasing = T)
df <- data.frame(gen.principal = y, genes = rownames(corr)[ind], cor = corr[ind])
nueva.col <- is.element(df[1,2], cjt)
for (i in 2:nrow(df)) {
nueva.col <- c(nueva.col, is.element(df[i,2], cjt))
}
df <- cbind(df, gen.glmnet=nueva.col)
tam <- 51
indx <- seleccionarFilas(rownames(x), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
adjusted_r2 <- as.numeric(summary(mymodel)[9])
# print(adjusted_r2)
diff <- adjusted_r2
while (diff > 10^(-3)){
tam <- tam+1
indx <- seleccionarFilas(rownames(data), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
ad_r2 <- as.numeric(summary(mymodel)[9])
# print(ad_r2)
diff <- ad_r2 -adjusted_r2
# print(diff)
adjusted_r2 <- ad_r2
}
if(diff > 0)
return(df[1:tam,])
else
return(df[1:(tam-1),])
}
library(gprofiler2)
ejecutando.gprofiler <- function(genes.seleccionados, tam, data, df){
all.genes = list()
all.genes[[genes.seleccionados[1,1]]] = df[1:tam[1], 2]
for (i in 2:nrow(genes.seleccionados)) {
all.genes[[genes.seleccionados[i,1]]] = df[(1+sum(tam[1:(i-1)])):(sum(tam[1:i])), 2]
}
background <- rownames(data)
output.gprofiler2 <- gost(all.genes,
correction_method="fdr",
custom_bg = background,
sources = c("GO","KEGG","REAC"),
domain_scope = "custom",
organism = "hsapiens",
exclude_iea = F)
return(output.gprofiler2)
}
calcularCorrelacion <- function(x,y, cjt, tam){
corr <- cor(x=t(x), y = t(x[which(rownames(x)==y),]))
ind <- order(abs(corr), decreasing = T)[1:(tam+1)]
df <- data.frame(gen.principal = y, genes = head(rownames(corr)[ind], (tam+1)), cor = corr[ind])
nueva.col <- is.element(df[1,2], cjt)
for (i in 2:nrow(df)) {
nueva.col <- c(nueva.col, is.element(df[i,2], cjt))
}
return(cbind(df, gen.glmnet=nueva.col))
}
df <- calcularCorrelacion(data, genes.seleccionados[1,1], genes.seleccionados[,1], 50)
for (i in 2:nrow(genes.seleccionados)) {
df <- rbind(df, calcularCorrelacion(data, genes.seleccionados[i,1], genes.seleccionados[,1], 50))
}
output.gprofiler2 <- ejecutando.gprofiler(genes.seleccionados, rep(51, nrow(genes.seleccionados)), data, df)
cat("Número de filas con 50 genes en cada cluster:", nrow(output.gprofiler2$result), "\n")
gprofiler2.result <- apply(output.gprofiler2$result, 2, as.character)
write.csv(gprofiler2.result, file="output.gprofiler2.WholeBlood.fijo.csv")
df <- calcularClusters(data, genes.seleccionados[1,1], genes.seleccionados[,1], data.train, age.train)
tam <- nrow(df)
for (i in 2:nrow(genes.seleccionados)) {
df_g <- calcularClusters(data, genes.seleccionados[i,1], genes.seleccionados[,1], data.train, age.train)
tam <- c(tam, nrow(df_g))
df <- rbind(df, df_g)
}
output.gprofiler2.variando <- ejecutando.gprofiler(genes.seleccionados, tam, data, df)
gprofiler2.result.variando <- apply(output.gprofiler2.variando$result, 2, as.character)
write.csv(gprofiler2.result.variando, file="output.gprofiler2.WholeBlood.variando.csv")
cat("Número de filas variando el número de genes en cada cluster:", nrow(output.gprofiler2.variando$result), "\n")
cat("Número de filas con 50 genes en cada cluster:", nrow(output.gprofiler2$result), "\n")
library(devtools)
library(tidyverse)
library(tidyverse)
