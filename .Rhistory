library(devtools)
library(tidyverse)
library(fs)
create_package("Home/coexnetwork")
create_package("~/coexnetwork")
exit
exit()
library(devtools)
library(tidyverse)
library(fs)
load_all()
library(devtools)
library(tidyverse)
library(fs)
proj_sitrep()
git config --global
file.exists("~/.ssh/id_rsa.pub")
library(devtools)
package_version("devtools")
packageVersion("devtools")
library(tidyverse)
library(fs)
knitr::opts_chunk$set(echo = TRUE)
expr.data <- read.delim("~/WholeBlood.txt.gz",header = T,row.names = 1)
data.age.num <- read.csv("~/GTEx_Analysis_2017-06-05_v8_Annotations_SubjectPhenotypesDS.csv", header = T, sep = "\t")
cat("Muestras", ncol(expr.data), "\n")
cat("Número de Genes", nrow(expr.data), "\n")
cat("Filas conjunto data.age.num:", nrow(data.age.num), "\n")
data.age.num[979:980, ]
data.age.num <- data.age.num[-980,]
filas <- data.age.num$SUBJID
filas <- gsub("-", ".", filas)
data.frame(longitud = 1:10, num.prefijos = tabulate(nchar(filas)))
prefijos.muestras10 <- substr(colnames(expr.data), 1,10)
prefijos.muestras9 <- substr(colnames(expr.data), 1,9)
elementos.en.comun.long10 <- intersect(prefijos.muestras10,filas)
elementos.en.comun.long9 <- intersect(prefijos.muestras9,filas)
seleccionarFilas <- function(x,y){
indices = data.frame()
indices = which(x==y[1])
for(n in 2:length(y)){
indices[n] = which(x==y[n])
}
return(indices)
}
indices.edad.long10 <- seleccionarFilas(filas, elementos.en.comun.long10)
indices.edad.long9 <- seleccionarFilas(filas, elementos.en.comun.long9)
indices.muestras.long10 <- seleccionarFilas(prefijos.muestras10, elementos.en.comun.long10)
indices.muestras.long9 <- seleccionarFilas(prefijos.muestras9, elementos.en.comun.long9)
data.characteristic <- data.age.num[c(indices.edad.long10,indices.edad.long9),c(3,4,11)]
age = data.characteristic$AGE
data = expr.data[, c(indices.muestras.long10,indices.muestras.long9)]
cat("Muestras que tienen edad en número", ncol(data), "\n")
nombresGenes <- read.csv("~/protcodinggenes.txt", sep = " ")
nomGenesFichExpr <- rownames(data)
nomGenesFichExpr <- unlist(lapply(strsplit(nomGenesFichExpr, "\\."),function(x){ return(x[1])}))
genesAmbosFicheros <- intersect(nomGenesFichExpr, nombresGenes[,2])
ind.nuevos.nombres <- seleccionarFilas(nombresGenes[,2], genesAmbosFicheros)
ind.nombres.antiguos <-  seleccionarFilas(nomGenesFichExpr, genesAmbosFicheros)
nuevos.nombres <- nombresGenes[ind.nuevos.nombres,1]
data <- data[ind.nombres.antiguos, ]
rownames(data) <- nuevos.nombres
cat("Número de Genes con nuevo nombre", nrow(data), "\n")
rm(data.age.num,expr.data,elementos.en.comun.long10, elementos.en.comun.long9, filas, indices.edad.long10, indices.edad.long9, indices.muestras.long10, indices.muestras.long9, prefijos.muestras10, prefijos.muestras9, nombresGenes, nomGenesFichExpr, genesAmbosFicheros, ind.nuevos.nombres, ind.nombres.antiguos, nuevos.nombres)
m <- mean(age)
d <- sd(age)
age <- (age-m)/d
# Cambiamos la escala
data <- log2(data + 1)
library(caret)
# Centramos y normalizamos los datos
preProc <- preProcess(data, method = c("center", "scale"))
data <- predict(preProc, data)
rm(preProc)
library(mlbench)
r.data <- apply(data, 1, round)
ind <-nearZeroVar(r.data,freqCut = 20, uniqueCut = 5)
cat("El número de variables a eliminar es: ", length(ind),"\n")
data <- data[-ind,]
rm(r.data, ind)
correlacion <- readRDS(file = paste("~/","correlacion.data.rds",sep=""))
eliminar <- findCorrelation(correlacion, cutoff=0.9)
cat("El número de variables a eliminar es: ", length(eliminar),"\n")
data <- data[-eliminar,]
rm(correlacion, eliminar)
library(glmnet)
for(a in c(0,0.5,1)){
set.seed(98)
ind.train <- sample(1:ncol(data), 0.8*ncol(data))
data.train <-  t(data[,ind.train])
age.train <-  age[ind.train]
# Devuelve una lista con todos los ingredientes de la validacion cruzada
cvfit<- cv.glmnet(data.train, age.train, alpha=a, family = "gaussian")
print(cvfit)
}
set.seed(98)
ind.train <- sample(1:ncol(data), 0.8*ncol(data))
data.train <-  t(data[,ind.train])
age.train <-  age[ind.train]
data.test <- t(data[,-ind.train])
age.test <- age[-ind.train]
# Devuelve una lista con todos los ingredientes de la validacion cruzada
cvfit<- cv.glmnet(data.train, age.train, alpha=1, family = "gaussian")
print(cvfit)
# Guardamos en un fichero el conjunto de genes seleccionados por glmnet para realizar la predicción:
coefic <- as.matrix(coef(cvfit,s="lambda.min"))
filas.dist.cero <- rownames(coefic)[which(coefic!=0)]
genes.seleccionados <- data.frame(Genes = filas.dist.cero[-1], Coeficientes = coefic[which(coefic!=0)][-1])
write.csv(genes.seleccionados, file="genesSeleccionados.GLMNET.edadNum.csv")
cat("\n Mostramos los 5 primeros genes seleccionados por el algoritmo GLMNET:", head(filas.dist.cero[-1], 5)," \n")
# Predecimos la edad del conjunto de test
predict.cvfit.test <- predict(cvfit, newx = data.test,type = "response",s = "lambda.min")
predict.cvfit.train <- predict(cvfit, newx = data.train,type = "response",s = "lambda.min")
# Predecimos la edad del conjunto de train
# Calculamos el RMSE del modelo sobre los datos de train y sobre los datos de test
library(MLmetrics)
tr <- MLmetrics::RMSE(predict.cvfit.train, age.train)
te <- MLmetrics::RMSE(predict.cvfit.test, age.test)
cat('\n',
'-> RMSE del modelo sobre los datos de train: ', tr, '\n',
'-> RMSE del modelo sobre los datos de test: ', te, '\n',
sep = ''
)
edad.real.test <- age.test*d+m
edad.predicha.test <- predict.cvfit.test*d+m
edad.real.train <- age.train*d+m
edad.predicha.train <- predict.cvfit.train*d+m
library(ggplot2)
datos <- data.frame(x = c(edad.real.test, edad.real.train), y = c(edad.predicha.test, edad.predicha.train), type = as.factor(c(rep("Test", ncol(data)-length(ind.train)), rep("Train", length(ind.train)))))
ggplot(datos,aes(x=datos[,1],y=datos[,2], color=type)) +
geom_point() +
geom_smooth(method='lm',se = FALSE) +
xlab("Edad real")+
ylab("Edad predicha")+
labs(title="Comparación entre la edad real de las muestras y la edad obtenida en la predicción")
cor.pred.salida <- cor(predict.cvfit.test[,1],age.test)
cat("La correlación entre la edad real y la predicha del conjunto de test es:", cor.pred.salida,"\n")
e <- 20:70
dfGraf<- data.frame(e)
dfGraf$col <- colorRampPalette(c("blue", "red"))(51)
ind <- seleccionarFilas(rownames(data),genes.seleccionados[,1])
datos.genes <-data[ind,]
pca.result <- prcomp(t(datos.genes))
#pca.result$rotation <- -pca.result$rotation
#pca.result$x <- - pca.result$x
pcas <- as.data.frame(pca.result$x,stringsAsFactors=F)
pcas <- cbind(edad.genes = as.numeric(age*d+m), pcas)
pcas$col <- dfGraf$col[pcas$edad.genes-19]
plot(x = pcas$PC1, y = pcas$PC2, col=pcas$col, pch = 20, xlab = "First Principal Component", ylab = "Second Principal Component", panel.first = grid())
gs = as.character()
semilla = 0
contador = 1;
semillas = numeric(10)
genesSelect = numeric(10)
erroresTrain = numeric(10)
erroresTest = numeric(10)
for(i in 9:0){
if(semilla == 987654321)
semilla = semilla +1
else
semilla = semilla*10+i
set.seed(semilla)
ind.train.10 <- sample(1:ncol(data), 0.8*ncol(data))
data.train.10 <-  t(data[,ind.train.10])
data.test.10 <-  t(data[,-ind.train.10])
age.train.10 <-  age[ind.train.10]
age.test.10 <- age[-ind.train.10]
cvfit.10<- cv.glmnet(data.train.10, age.train.10, alpha=1, family = "gaussian")
# print(cvfit.10)
coefic.10 <- as.matrix(coef(cvfit.10,s="lambda.min"))
filas.dist.cero.10 <- rownames(coefic.10)[which(coefic.10!=0)]
genes.seleccionados.10 <- data.frame(Genes = filas.dist.cero.10[-1], Coeficientes = coefic.10[which(coefic.10!=0)][-1])
predict.cvfit.test.10 <- predict(cvfit.10, newx = data.test.10,type = "response",s = "lambda.min")
predict.cvfit.train.10 <- predict(cvfit.10, newx = data.train.10,type = "response",s = "lambda.min")
gs = c(gs, as.character(genes.seleccionados.10[,1]))
semillas[contador] <- semilla
genesSelect[contador] <- nrow(genes.seleccionados.10)
erroresTrain[contador] <- MLmetrics::RMSE(predict.cvfit.train.10, age.train.10)
erroresTest[contador] <- MLmetrics::RMSE(predict.cvfit.test.10, age.test.10)
contador = contador + 1
}
datos.guardar = data.frame(semillas, genesSelect, erroresTrain, erroresTest)
write.csv(datos.guardar, file = "resultados.cv.glmnet.csv")
gs = as.factor(gs)
as.data.frame(table(gs)[order(tabulate(gs), decreasing = T)])
t <- data.frame(num.apariciones.genes = tabulate(gs))
myhist = ggplot(data=t, aes(num.apariciones.genes)) +
geom_histogram(col="light blue",fill="light blue",alpha=0.75,
breaks=seq(0, 10, by=1)) +
labs(title="Histograma frecuencia genes", x = "Número de veces que se repiten los genes", y="Número de genes")
myhist
summary(tabulate(gs))
datos.guardar
gs.nuestros.genes <- data.frame(table(gs))
id <- seleccionarFilas(as.character(gs.nuestros.genes[,1]), as.character(genes.seleccionados[,1]))
gs.nuestros.genes <- gs.nuestros.genes[id,]
as.data.frame(gs.nuestros.genes[order(gs.nuestros.genes[,2], decreasing = T),])
summary(gs.nuestros.genes[,2])
c <- cor(t(datos.genes))
#corrplot::corrplot(c)
e <- findCorrelation(c, cutoff=0.775)
cat("Pares de genes cuya correlación, en valor absoluto, es mayor que 0.775:", length(e))
V <- cov(t(datos.genes))
sigma11 <- V[1,1]
v12 <- V[1, 2:nrow(V)]
V22 <- V[2:nrow(V), 2:nrow(V)]
coef.corr.mult <- (t(v12)%*%solve(V22)%*%v12)/sigma11
coef.corr.mult
calcularCorrelacion <- function(x,y, cjt, tam){
corr <- cor(x=t(x), y = t(x[which(rownames(x)==y),]))
ind <- order(abs(corr), decreasing = T)[1:(tam+1)]
df <- data.frame(gen.principal = y, genes = head(rownames(corr)[ind], (tam+1)), cor = corr[ind])
nueva.col <- is.element(df[1,2], cjt)
for (i in 2:nrow(df)) {
nueva.col <- c(nueva.col, is.element(df[i,2], cjt))
}
return(cbind(df, gen.glmnet=nueva.col))
}
indiceJaccard <- function(genes.seleccionados, df, tam){
indJac <- numeric(sum(1:(nrow(genes.seleccionados)-1)))
cont <- 1
for (i in 1:(nrow(genes.seleccionados)-1)) {
for (j in (i+1):(nrow(genes.seleccionados))) {
indJac[cont] <- length(intersect(df[(i+(i-1)*tam):(i+(i-1)*tam+tam),2], df[(j+(j-1)*tam):(j+(j-1)*tam+tam),2])) / length(union(df[(i+(i-1)*tam):(i+(i-1)*tam+tam),2], df[(j+(j-1)*tam):(j+(j-1)*tam+tam),2]))
cont <- cont + 1
}
}
return(summary(indJac))
}
ejecutando.gprofiler <- function(genes.seleccionados, tam, data){
all.genes = list()
for (i in 1:nrow(genes.seleccionados)) {
all.genes[[genes.seleccionados[i,1]]] = df[(i+(i-1)*tam):(i+(i-1)*tam+tam), 2]
}
background <- rownames(data)
library(gprofiler2)
output.gprofiler2 <- gost(all.genes,
correction_method="fdr",
custom_bg = background,
sources = c("GO","KEGG","REAC"),
domain_scope = "custom",
organism = "hsapiens",
exclude_iea = F)
return(output.gprofiler2)
}
df <- calcularCorrelacion(data, genes.seleccionados[1,1], genes.seleccionados[,1], 100)
for (i in 2:nrow(genes.seleccionados)) {
df <- rbind(df, calcularCorrelacion(data, genes.seleccionados[i,1], genes.seleccionados[,1], 50))
}
all.genes = list()
for (i in 1:nrow(genes.seleccionados)) {
all.genes[[genes.seleccionados[i,1]]] = df[(i+(i-1)*50):(i+(i-1)*50+50), 2]
}
background <- rownames(data)
library(gprofiler2)
output.gprofiler2 <- gost(all.genes,
correction_method="fdr",
custom_bg = background,
sources = c("GO","KEGG","REAC"),
domain_scope = "custom",
organism = "hsapiens",
exclude_iea = F)
gprofiler2.result <- apply(output.gprofiler2$result, 2, as.character)
write.csv(gprofiler2.result, file="output.gprofiler2.WholeBlood.csv")
View(all.genes)
View(df)
View(all.genes[[1]])
