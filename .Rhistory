indices[n] = which(x==y[n])
}
return(indices)
}
indices.edad.long10 <- seleccionarFilas(filas, elementos.en.comun.long10)
indices.edad.long9 <- seleccionarFilas(filas, elementos.en.comun.long9)
indices.muestras.long10 <- seleccionarFilas(prefijos.muestras10, elementos.en.comun.long10)
indices.muestras.long9 <- seleccionarFilas(prefijos.muestras9, elementos.en.comun.long9)
data.characteristic <- data.age.num[c(indices.edad.long10,indices.edad.long9),c(3,4,11)]
age = data.characteristic$AGE
data = expr.data[, c(indices.muestras.long10,indices.muestras.long9)]
nombresGenes <- read.csv("~/protcodinggenes.txt", sep = " ")
nomGenesFichExpr <- rownames(data)
nomGenesFichExpr <- unlist(lapply(strsplit(nomGenesFichExpr, "\\."),function(x){ return(x[1])}))
genesAmbosFicheros <- intersect(nomGenesFichExpr, nombresGenes[,2])
ind.nuevos.nombres <- seleccionarFilas(nombresGenes[,2], genesAmbosFicheros)
ind.nombres.antiguos <-  seleccionarFilas(nomGenesFichExpr, genesAmbosFicheros)
nuevos.nombres <- nombresGenes[ind.nuevos.nombres,1]
data <- data[ind.nombres.antiguos, ]
rownames(data) <- nuevos.nombres
rm(data.age.num,expr.data,elementos.en.comun.long10, elementos.en.comun.long9, filas, indices.edad.long10, indices.edad.long9, indices.muestras.long10, indices.muestras.long9, prefijos.muestras10, prefijos.muestras9, nombresGenes, nomGenesFichExpr, genesAmbosFicheros, ind.nuevos.nombres, ind.nombres.antiguos, nuevos.nombres)
m <- mean(age)
d <- sd(age)
age <- (age-m)/d
# Cambiamos la escala
data <- log2(data + 1)
library(caret)
# Centramos y normalizamos los datos
preProc <- preProcess(data, method = c("center", "scale"))
data <- predict(preProc, data)
rm(preProc)
library(mlbench)
r.data <- apply(data, 1, round)
ind <-nearZeroVar(r.data,freqCut = 20, uniqueCut = 5)
cat("El número de variables a eliminar es: ", length(ind),"\n")
data <- data[-ind,]
rm(r.data, ind)
correlacion <- readRDS(file = paste("~/","correlacion.data.rds",sep=""))
eliminar <- findCorrelation(correlacion, cutoff=0.9)
cat("El número de variables a eliminar es: ", length(eliminar),"\n")
data <- data[-eliminar,]
cat("Muestras:", ncol(data), "\n")
cat("Número de genes que definen estas muestras:", nrow(data), "\n")
set.seed(98)
ind.train <- sample(1:ncol(data), 0.8*ncol(data))
data.train <-  t(data[,ind.train])
age.train <-  age[ind.train]
data.test <- t(data[,-ind.train])
age.test <- age[-ind.train]
# Devuelve una lista con todos los ingredientes de la validacion cruzada
cvfit<- cv.glmnet(data.train, age.train, alpha=1, family = "gaussian")
print(cvfit)
# Guardamos en un fichero el conjunto de genes seleccionados por glmnet para realizar la predicción:
coefic <- as.matrix(coef(cvfit,s="lambda.min"))
filas.dist.cero <- rownames(coefic)[which(coefic!=0)]
genes.seleccionados <- data.frame(Genes = filas.dist.cero[-1], Coeficientes = coefic[which(coefic!=0)][-1])
write.csv(genes.seleccionados, file="genesSeleccionados.GLMNET.edadNum.csv")
cat("\n Mostramos los 5 primeros genes seleccionados por el algoritmo GLMNET:", head(filas.dist.cero[-1], 5)," \n")
# Predecimos la edad del conjunto de test
predict.cvfit.test <- predict(cvfit, newx = data.test,type = "response",s = "lambda.min")
predict.cvfit.train <- predict(cvfit, newx = data.train,type = "response",s = "lambda.min")
# Predecimos la edad del conjunto de train
# Calculamos el RMSE del modelo sobre los datos de train y sobre los datos de test
library(MLmetrics)
tr <- MLmetrics::RMSE(predict.cvfit.train, age.train)
te <- MLmetrics::RMSE(predict.cvfit.test, age.test)
cat('\n',
'-> RMSE del modelo sobre los datos de train: ', tr, '\n',
'-> RMSE del modelo sobre los datos de test: ', te, '\n',
sep = ''
)
edad.real.test <- age.test*d+m
edad.predicha.test <- predict.cvfit.test*d+m
edad.real.train <- age.train*d+m
edad.predicha.train <- predict.cvfit.train*d+m
library(ggplot2)
datos <- data.frame(x = c(edad.real.test, edad.real.train), y = c(edad.predicha.test, edad.predicha.train), type = as.factor(c(rep("Test", ncol(data)-length(ind.train)), rep("Train", length(ind.train)))))
ggplot(datos,aes(x=datos[,1],y=datos[,2], color=type)) +
geom_point() +
geom_smooth(method='lm',se = FALSE) +
xlab("Edad real")+
ylab("Edad predicha")+
labs(title="Comparación entre la edad real de las muestras y la edad obtenida en la predicción")
cor.pred.salida <- cor(predict.cvfit.test[,1],age.test)
cat("La correlación entre la edad real y la predicha del conjunto de test es:", cor.pred.salida,"\n")
calcularCorrelacion <- function(x,y, cjt, tam){
corr <- cor(x=t(x), y = t(x[which(rownames(x)==y),]))
ind <- order(abs(corr), decreasing = T)[1:(tam+1)]
df <- data.frame(gen.principal = y, genes = head(rownames(corr)[ind], (tam+1)), cor = corr[ind])
nueva.col <- is.element(df[1,2], cjt)
for (i in 2:nrow(df)) {
nueva.col <- c(nueva.col, is.element(df[i,2], cjt))
}
return(cbind(df, gen.glmnet=nueva.col))
}
indiceJaccard <- function(genes.seleccionados, df, tam){
indJac <- numeric(sum(1:(nrow(genes.seleccionados)-1)))
cont <- 1
for (i in 1:(nrow(genes.seleccionados)-1)) {
for (j in (i+1):(nrow(genes.seleccionados))) {
indJac[cont] <- length(intersect(df[(i+(i-1)*tam):(i+(i-1)*tam+tam),2], df[(j+(j-1)*tam):(j+(j-1)*tam+tam),2])) / length(union(df[(i+(i-1)*tam):(i+(i-1)*tam+tam),2], df[(j+(j-1)*tam):(j+(j-1)*tam+tam),2]))
cont <- cont + 1
}
}
return(summary(indJac))
}
ejecutando.gprofiler <- function(genes.seleccionados, tam, data){
all.genes = list()
for (i in 1:nrow(genes.seleccionados)) {
all.genes[[genes.seleccionados[i,1]]] = df[(i+(i-1)*tam):(i+(i-1)*tam+tam), 2]
}
background <- rownames(data)
library(gprofiler2)
output.gprofiler2 <- gost(all.genes,
correction_method="fdr",
custom_bg = background,
sources = c("GO","KEGG","REAC"),
domain_scope = "custom",
organism = "hsapiens",
exclude_iea = F)
return(output.gprofiler2)
}
df <- calcularCorrelacion(data, genes.seleccionados[1,1], genes.seleccionados[,1], 50)
for (i in 2:nrow(genes.seleccionados)) {
df <- rbind(df, calcularCorrelacion(data, genes.seleccionados[i,1], genes.seleccionados[,1], 50))
}
View(df)
all.genes = list()
for (i in 1:nrow(genes.seleccionados)) {
all.genes[[genes.seleccionados[i,1]]] = df[(i+(i-1)*50):(i+(i-1)*50+50), 2]
}
View(all.genes)
View(all.genes[[1]])
document()
document()
load_all()
check()
document()
load_all()
check()
expr.data <- read.delim("~/WholeBlood.txt.gz",header = T,row.names = 1)
data.age.num <- read.csv("~/GTEx_Analysis_2017-06-05_v8_Annotations_SubjectPhenotypesDS.csv", header = T, sep = "\t")
data.age.num <- data.age.num[-980,]
filas <- data.age.num$SUBJID
filas <- gsub("-", ".", filas)
prefijos.muestras10 <- substr(colnames(expr.data), 1,10)
prefijos.muestras9 <- substr(colnames(expr.data), 1,9)
elementos.en.comun.long10 <- intersect(prefijos.muestras10,filas)
elementos.en.comun.long9 <- intersect(prefijos.muestras9,filas)
library(SuCoNets)
indices.edad.long10 <- seleccionarFilas(filas, elementos.en.comun.long10)
expr.data <- read.delim("~/WholeBlood.txt.gz",header = T,row.names = 1)
data.age.num <- read.csv("~/GTEx_Analysis_2017-06-05_v8_Annotations_SubjectPhenotypesDS.csv", header = T, sep = "\t")
data.age.num <- data.age.num[-980,]
rw <- data.age.num$SUBJID
rw <- gsub("-", ".", rw)
sample.prefixes10 <- substr(colnames(expr.data), 1,10)
sample.prefixes9 <- substr(colnames(expr.data), 1,9)
common.elements.length10 <- intersect(sample.prefixes10,rw)
common.elements.length9 <- intersect(sample.prefixes9,rw)
library(SuCoNets)
indexes.age.length10 <- selectRows(rw, common.elements.length10)
indexes.age.length9 <- selectRows(rw, common.elements.length9)
indexes.samples.length10 <- selectRows(sample.prefixes10, common.elements.length10)
indexes.samples.length9 <- selectRows(sample.prefixes9, common.elements.length9)
data.characteristic <- data.age.num[c(indexes.age.length10,indexes.age.length9),c(3,4,11)]
age = data.characteristic$AGE
data = expr.data[, c( indexes.samples.length10, indexes.samples.length9)]
nameGenes <- read.csv("~/protcodinggenes.txt", sep = " ")
nameGenesFileExpr <- rownames(data)
nameGenesFileExpr <- unlist(lapply(strsplit(nameGenesFileExpr, "\\."),function(x){ return(x[1])}))
genesBothFiles <- intersect(nameGenesFileExpr, nameGenes[,2])
ind.new.names <- selectRows(nameGenes[,2], genesBothFiles)
ind.old.names <-  selectRows(nameGenesFileExpr, genesBothFiles)
new.names <- nameGenes[ind.new.names,1]
data <- data[ind.old.names, ]
rownames(data) <- new.names
rm(data.age.num,expr.data,common.elements.length10, common.elements.length9, rw, indexes.age.length10, indexes.age.length9,  indexes.samples.length10,  indexes.samples.length9, sample.prefixes10, sample.prefixes9, nameGenes, nameGenesFileExpr, genesBothFiles, ind.new.names, ind.old.names, new.names)
library(SuCoNets)
age <- normalize(age)
m <- age[1]
d <- age[2]
age <- age[-c(1,2)]
data <- scn(data)
data <- rRedundantPredictors(data)
seed <- bestSeed(data,age)
cvfit <- glmnetGenes(data,age, seed)
glmnet::print.cv.glmnet(cvfit)
selected.genes <- detectGenes(data,age,cvfit)
comparisonActualPredictedCovariate(data, age, m, d, cvfit, seed)
distributionIndividualsCovariate (data, age, selected.genes, m,d)
selection.statistics <- histGeneFreq(data, age, selected.genes)
selection.statistics
document()
load_all()
check()
install()
histGeneFreq(selection.statistics)
selection.statistics <- stabilitySelection(data, age, selected.genes)
selection.statistics
histGeneFreq(selection.statistics)
summary(selection.statistics)
histGeneFreq(selection.statistics)
comparisonActualPredictedCovariate(data, age, m, d, cvfit, seed)
distributionIndividualsCovariate (data, age, selected.genes, m,d)
document()
load_all()
check()
install()
selection.statistics <- stabilitySelection(data, age, selected.genes)
summary(selection.statistics[,2])
histGeneFreq(selection.statistics)
View(selection.statistics)
network.fixed <- coexpressionNetworkFixed(data, selected.genes, 50)
View(network.fixed)
network.variable <- coexpressionNetworkVariable(data, selected.genes, age, seed)
output.gprofiler2.fixed <- running.gprofiler(selected.genes, rep(51, nrow(genes.seleccionados)), data, network.fixed)
output.gprofiler2.fixed <- running.gprofiler(selected.genes, rep(51, nrow(selected.genes)), data, network.fixed)
output.gprofiler2.variable <- running.gprofiler(selected.genes, network.variable[[2]], data, network.variable[[1]])
build_readme()
check()
install()
knitr::opts_chunk$set(echo = TRUE)
data.age.num <- read.csv("~/GTEx_Analysis_2017-06-05_v8_Annotations_SubjectPhenotypesDS.csv", header = T, sep = "\t")
knitr::opts_chunk$set(echo = TRUE)
expr.data <- read.delim("~/Cerebellum.txt.gz",header = T,row.names = 1)
data.age.num <- read.csv("~/GTEx_Analysis_2017-06-05_v8_Annotations_SubjectPhenotypesDS.csv", header = T, sep = "\t")
cat("Filas conjunto data.age.num:", nrow(data.age.num), "\n")
data.age.num[979:980, ]
data.age.num <- data.age.num[-980,]
filas <- data.age.num$SUBJID
filas <- gsub("-", ".", filas)
prefijos.muestras10 <- substr(colnames(expr.data), 1,10)
prefijos.muestras9 <- substr(colnames(expr.data), 1,9)
elementos.en.comun.long10 <- intersect(prefijos.muestras10,filas)
elementos.en.comun.long9 <- intersect(prefijos.muestras9,filas)
seleccionarFilas <- function(x,y){
indices = data.frame()
indices = which(x==y[1])
for(n in 2:length(y)){
indices[n] = which(x==y[n])
}
return(indices)
}
indices.edad.long10 <- seleccionarFilas(filas, elementos.en.comun.long10)
indices.edad.long9 <- seleccionarFilas(filas, elementos.en.comun.long9)
indices.muestras.long10 <- seleccionarFilas(prefijos.muestras10, elementos.en.comun.long10)
indices.muestras.long9 <- seleccionarFilas(prefijos.muestras9, elementos.en.comun.long9)
data.characteristic <- data.age.num[c(indices.edad.long10,indices.edad.long9),c(3,4,11)]
age = data.characteristic$AGE
data = expr.data[, c(indices.muestras.long10,indices.muestras.long9)]
nombresGenes <- read.csv("~/protcodinggenes.txt", sep = " ")
nomGenesFichExpr <- rownames(data)
nomGenesFichExpr <- unlist(lapply(strsplit(nomGenesFichExpr, "\\."),function(x){ return(x[1])}))
genesAmbosFicheros <- intersect(nomGenesFichExpr, nombresGenes[,2])
ind.nuevos.nombres <- seleccionarFilas(nombresGenes[,2], genesAmbosFicheros)
ind.nombres.antiguos <-  seleccionarFilas(nomGenesFichExpr, genesAmbosFicheros)
nuevos.nombres <- as.character(nombresGenes[ind.nuevos.nombres,1])
data <- data[ind.nombres.antiguos, ]
ind.rep <- which(nuevos.nombres== "TMSB15B")
nuevos.nombres[ind.rep[1]] <- "TMSB15B.1"
nuevos.nombres[ind.rep[2]] <- "TMSB15B.2"
nuevos.nombres <- as.factor(nuevos.nombres)
rownames(data) <- nuevos.nombres
rm(data.age.num,expr.data,elementos.en.comun.long10, elementos.en.comun.long9, filas, indices.edad.long10, indices.edad.long9, indices.muestras.long10, indices.muestras.long9, prefijos.muestras10, prefijos.muestras9, nombresGenes, nomGenesFichExpr, genesAmbosFicheros, ind.nuevos.nombres, ind.nombres.antiguos, nuevos.nombres)
m <- mean(age)
d <- sd(age)
age <- (age-m)/d
summary(age)
sd(age)
knitr::opts_chunk$set(echo = TRUE)
blood <- read.delim("~/WholeBlood.txt.gz",header = T,row.names = 1)
cerebellum <- read.delim("~/Cerebellum.txt.gz",header = T,row.names = 1)
frontalCortex <- read.delim("~/FrontalCortex.txt.gz",header = T,row.names = 1)
substantiaNigra <- read.delim("~/SubstantiaNigra.txt.gz",header = T,row.names = 1)
data.age.num <- read.csv("~/GTEx_Analysis_2017-06-05_v8_Annotations_SubjectPhenotypesDS.csv", header = T, sep = "\t")
data.age.num <- data.age.num[-980,]
r <- data.age.num$SUBJID
r <- gsub("-", ".", r)
vector <- vector(mode="list",4)
vector[[1]]<- list(blood, 98, "Blood")
vector[[2]] <- list(cerebellum, 987654, "Cerebellum")
vector[[3]] <- list(frontalCortex, 98765, "FrontalCortex")
vector[[4]] <- list(substantiaNigra, 98765432, "SubstantiaNigra")
library(vctrs)
df.summary <- data_frame()
library(gprofiler2)
library(caret)
library(mlbench)
library(glmnet)
selectRows <- function(x,y){
indexes = data.frame()
indexes = which(x==y[1])
for(n in 2:length(y)){
indexes[n] = which(x==y[n])
}
return(indexes)
}
calculateClusters <- function(x,y, cjt, data.train, age.train){
corr <- cor(x=t(x), y = t(x[which(rownames(x)==y),]))
ind <- order(abs(corr), decreasing = T)
df <- data.frame(gen.principal = y, genes = rownames(corr)[ind], cor = corr[ind])
new.col <- is.element(df[1,2], cjt)
for (i in 2:nrow(df)) {
new.col <- c(new.col, is.element(df[i,2], cjt))
}
df <- cbind(df, gen.glmnet=new.col)
tam <- 2
indx <- selectRows(rownames(x), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
adjusted_r2 <- as.numeric(summary(mymodel)[9])
r2 <- adjusted_r2
diff <- 1
while (diff > 10^(-3)){
tam <- tam+1
indx <- selectRows(rownames(data), df[1:tam,2])
mydata <- data.frame(age.train = age.train, data.train[,indx])
mymodel = lm(age.train~ .,data=mydata)
ad_r2 <- as.numeric(summary(mymodel)[9])
diff <- ad_r2 -adjusted_r2
adjusted_r2 <- ad_r2
r2 <- c(r2, adjusted_r2)
}
r2=c(0,r2)
if(diff > 0)
return(cbind(df[1:tam,], Adjusted.R2 = r2))
else
return(cbind(df[1:(tam-1),], Adjusted.R2 = head(r2,n=(tam-1))))
}
calculateCorrelation <- function(x,y, cjt, tam){
corr <- cor(x=t(x), y = t(x[which(rownames(x)==y),]))
ind <- order(abs(corr), decreasing = T)[1:(tam+1)]
df <- data.frame(gen.principal = y, genes = head(rownames(corr)[ind], (tam+1)), cor = corr[ind])
new.col <- is.element(df[1,2], cjt)
for (i in 2:nrow(df)) {
new.col <- c(new.col, is.element(df[i,2], cjt))
}
return(cbind(df, gen.glmnet=new.col))
}
running.gprofiler <- function(selected.genes, tam, data, df){
all.genes = list()
all.genes[[selected.genes[1,1]]] = df[1:tam[1], 2]
for (i in 2:nrow(selected.genes)) {
all.genes[[selected.genes[i,1]]] = df[(1+sum(tam[1:(i-1)])):(sum(tam[1:i])), 2]
}
background <- rownames(data)
output.gprofiler2 <- gost(all.genes,
correction_method="fdr",
custom_bg = background,
sources = c("GO","KEGG","REAC"),
domain_scope = "custom",
organism = "hsapiens",
exclude_iea = F)
return(output.gprofiler2)
}
l <- list(blood, 98, "Blood")
tissue <- l[[1]]
seed <- l[[2]]
name <- l[[3]]
cat("\n\n Tissue", name, "\n\n")
sample.prefixes10 <- substr(colnames(tissue), 1,10)
sample.prefixes9 <- substr(colnames(tissue), 1,9)
common.elements.length10 <- intersect(sample.prefixes10,r)
common.elements.length9 <- intersect(sample.prefixes9,r)
indexes.age.length10 <- selectRows(r, common.elements.length10)
indexes.age.length9 <- selectRows(r, common.elements.length9)
indexes.samples.length10 <- selectRows(sample.prefixes10, common.elements.length10)
indexes.samples.length9 <- selectRows(sample.prefixes9, common.elements.length9)
data.characteristic <- data.age.num[c(indexes.age.length10,indexes.age.length9),c(3,4,11)]
age = data.characteristic$AGE
data = tissue[, c(indexes.samples.length10,indexes.samples.length9)]
nameGenes <- read.csv("~/protcodinggenes.txt", sep = " ")
nameGenesFileExpr <- rownames(data)
nameGenesFileExpr <- unlist(lapply(strsplit(nameGenesFileExpr, "\\."),function(x){ return(x[1])}))
genesBothFiles <- intersect(nameGenesFileExpr, nameGenes[,2])
ind.new.names <- selectRows(nameGenes[,2], genesBothFiles)
ind.old.names <-  selectRows(nameGenesFileExpr, genesBothFiles)
new.names <- as.character(nameGenes[ind.new.names,1])
data <- data[ind.old.names, ]
if(name == "Cerebellum"){
ind.rep <- which(new.names== "TMSB15B")
new.names[ind.rep[1]] <- "TMSB15B.1"
new.names[ind.rep[2]] <- "TMSB15B.2"
}
new.names <- as.factor(new.names)
rownames(data) <- new.names
# Preprocessing
m <- mean(age)
d <- sd(age)
age <- (age-m)/d
# Changing the scale
data <- log2(data + 1)
# Centering and normalizing data
preProc <- preProcess(data, method = c("center", "scale"))
data <- predict(preProc, data)
rm(preProc)
# Removing redundant predictors
r.data <- apply(data, 1, round)
ind <-nearZeroVar(r.data,freqCut = 20, uniqueCut = 5)
data <- data[-ind,]
rm(r.data, ind)
correlation <- cor(t(data))
remove <- findCorrelation(correlation, cutoff=0.9)
data <- data[-remove,]
rm(correlation, remove)
# Running glmnet
set.seed(seed)
ind.train <- sample(1:ncol(data), 0.8*ncol(data))
data.train <-  t(data[,ind.train])
age.train <-  age[ind.train]
data.test <- t(data[,-ind.train])
age.test <- age[-ind.train]
cvfit<- cv.glmnet(data.train, age.train, alpha=1, family = "gaussian")
# We save the set of genes selected by glmnet to perform the prediction:
coefic <- as.matrix(coef(cvfit,s="lambda.min"))
non.zero.rows <- rownames(coefic)[which(coefic!=0)]
selected.genes <- data.frame(Genes = non.zero.rows[-1], Coefficients = coefic[which(coefic!=0)][-1])
# We calculate the clusters with a fixed size of 50 genes, run gprofiler and see how many terms we obtain
df <- calculateCorrelation(data, selected.genes[1,1], selected.genes[,1], 50)
for (i in 2:nrow(selected.genes)) {
df <- rbind(df, calculateCorrelation(data, selected.genes[i,1], selected.genes[,1], 50))
}
# We calculate the clusters with the new strategy, order the genes according to the importance
# determined by glmnet and show the plots where we can see the evolution of the adjusted R2
# as we increase the number of genes that are part of the cluster.
# These plots are only shown for the 5 genes that glmnet has determined as most important.
indexes <- order(abs(selected.genes[,2]), decreasing = T)
sorted.genes <- selected.genes[indexes, ]
df <- calculateClusters(data, sorted.genes[1,1], sorted.genes[,1], data.train, age.train)
tam <- nrow(df)
for (i in 2:nrow(sorted.genes)) {
df_g <- calculateClusters(data, sorted.genes[i,1], sorted.genes[,1], data.train, age.train)
if(i <= 5)
plot(x = 2:(nrow(df_g)+1), y = df_g$Adjusted.R2, xlab = "number of genes", ylab= "Adjusted R2", main =paste("Evolution of adjusted R2", df_g[1,1]))
tam <- c(tam, nrow(df_g))
df <- rbind(df, df_g)
}
View(df)
document()
load_all()
check()
document()
load_all()
check()
install()
build_readme()
check()
install()
knitr::opts_chunk$set(echo = TRUE)
expr.data <- read.delim("~/WholeBlood.txt.gz",header = T,row.names = 1)
data.age.num <- read.csv("~/GTEx_Analysis_2017-06-05_v8_Annotations_SubjectPhenotypesDS.csv", header = T, sep = "\t")
data.age.num <- data.age.num[-980,]
filas <- data.age.num$SUBJID
filas <- gsub("-", ".", filas)
prefijos.muestras10 <- substr(colnames(expr.data), 1,10)
prefijos.muestras9 <- substr(colnames(expr.data), 1,9)
elementos.en.comun.long10 <- intersect(prefijos.muestras10,filas)
elementos.en.comun.long9 <- intersect(prefijos.muestras9,filas)
seleccionarFilas <- function(x,y){
indices = data.frame()
indices = which(x==y[1])
for(n in 2:length(y)){
indices[n] = which(x==y[n])
}
return(indices)
}
indices.edad.long10 <- seleccionarFilas(filas, elementos.en.comun.long10)
indices.edad.long9 <- seleccionarFilas(filas, elementos.en.comun.long9)
indices.muestras.long10 <- seleccionarFilas(prefijos.muestras10, elementos.en.comun.long10)
indices.muestras.long9 <- seleccionarFilas(prefijos.muestras9, elementos.en.comun.long9)
data.characteristic <- data.age.num[c(indices.edad.long10,indices.edad.long9),c(3,4,11)]
age = data.characteristic$AGE
data = expr.data[, c(indices.muestras.long10,indices.muestras.long9)]
nombresGenes <- read.csv("~/protcodinggenes.txt", sep = " ")
nomGenesFichExpr <- rownames(data)
nomGenesFichExpr <- unlist(lapply(strsplit(nomGenesFichExpr, "\\."),function(x){ return(x[1])}))
genesAmbosFicheros <- intersect(nomGenesFichExpr, nombresGenes[,2])
ind.nuevos.nombres <- seleccionarFilas(nombresGenes[,2], genesAmbosFicheros)
ind.nombres.antiguos <-  seleccionarFilas(nomGenesFichExpr, genesAmbosFicheros)
nuevos.nombres <- nombresGenes[ind.nuevos.nombres,1]
data <- data[ind.nombres.antiguos, ]
rownames(data) <- nuevos.nombres
rm(data.age.num,expr.data,elementos.en.comun.long10, elementos.en.comun.long9, filas, indices.edad.long10, indices.edad.long9, indices.muestras.long10, indices.muestras.long9, prefijos.muestras10, prefijos.muestras9, nombresGenes, nomGenesFichExpr, genesAmbosFicheros, ind.nuevos.nombres, ind.nombres.antiguos, nuevos.nombres)
devtools::install_github('juanbot/CoExpNets')
net = CoExpNets::getDownstreamNetwork(tissue="WholeBlood",
n.iterations=20,
net.type = "signed",
debug=F, fullAnnotation=T,silent=F,
expr.data=data,
job.path="results/")
net = getDownstreamNetwork(tissue="WholeBlood",
n.iterations=20,
net.type = "signed",
debug=F, fullAnnotation=T,silent=F,
expr.data=data,
job.path="results/")
library(devtools)
devtools::install_github('juanbot/CoExpNets')
net = getDownstreamNetwork(tissue="WholeBlood",
n.iterations=20,
net.type = "signed",
debug=F, fullAnnotation=T,silent=F,
expr.data=data,
job.path="results/")
devtools::install_github('juanbot/CoExpNets')
net = getDownstreamNetwork(tissue="WholeBlood",
n.iterations=20,
net.type = "signed",
debug=F, fullAnnotation=T,silent=F,
expr.data=data,
job.path="results/")
